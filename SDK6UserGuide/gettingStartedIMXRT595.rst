.. _sdk_6_getting_started_imxrt595:

i.MX RT595 EVK
==============

During this Getting Started, you will learn to run an application on the Virtual Device and on the Device using the MicroEJ SDK 6.

Requirements
------------

To follow this Getting Started, all you need is: 

* MicroEJ SDK 6 installed (check the :ref:`System Requirements <sdk_6_system_requirements>` and your :ref:`JDK Version <sdk_6_java_version>`).
* i.MX RT595 EVK board, available `here <https://www.nxp.com/design/development-boards/i-mx-evaluation-and-development-boards/i-mx-rt595-evaluation-kit:MIMXRT595-EVK>`__.
* G1120B0MIPI display panel, available `here <https://www.nxp.com/part/G1120B0MIPI>`__.
* A `GNU ARM Embedded Toolchain <https://developer.arm.com/downloads/-/gnu-rm>`__, `Cmake <https://cmake.org/>`__ and `Make <https://gnuwin32.sourceforge.net/packages/make.htm>`__ are needed to build the BSP.
* `LinkServer <https://www.nxp.com/design/software/development-software/mcuxpresso-software-and-tools-/linkserver-for-microcontrollers:LINKERSERVER>`__ tool to flash the board

Install MicroEJ SDK 6
^^^^^^^^^^^^^^^^^^^^^

Install the MicroEJ SDK 6 plugin on your IDE by following :ref:`sdk_6_install` instructions.

Install the C toolchain
^^^^^^^^^^^^^^^^^^^^^^^

The C toolchain must be installed, it is composed of the GNU ARM Embedded Toolchain, CMake and Make.

.. note::
  
   This Getting Started has been tested with the following configuration:

   - GNU ARM Embedded Toolchain version ``10.3 2021.10``.
   - CMake version ``3.26.5``.
   - Make version ``3.81``.

   Later versions may or may not work, and may need modification to the Getting Started steps.

Install GNU ARM Embedded Toolchain 
""""""""""""""""""""""""""""""""""

The toolchain is the `GNU ARM Embedded Toolchain <https://developer.arm.com/downloads/-/gnu-rm>`__. 

Once installed, ``ARMGCC_DIR`` must be set as an environment variable and point to the toolchain directory. To do so: 

* Open the ``Edit the system environment variables`` application on Windows.
* Click on the ``Environment Variables...`` button.
* Click on the ``New...`` button under the ``User variables`` section.
* Set ``Variable Name`` to ``ARMGCC_DIR``.
* Set ``Variable Value`` to the toolchain directory (e.g. ``C:\Program Files (x86)\GNU Arm Embedded Toolchain\10 2021.10``).
* Click on the ``Ok`` button until it closes ``Edit the system environment variables`` application.

Install CMake
"""""""""""""

`Cmake <https://cmake.org/download/>`__ is the application used by the build system to generate the firmware.

Install Make
""""""""""""

`Make <https://gnuwin32.sourceforge.net/packages/make.htm>`__ is the tool that will generate the executable based on the files generated by CMake. It will also be used to flash the board. 

Install the flashing tool
^^^^^^^^^^^^^^^^^^^^^^^^^

.. note::
  
   This Getting Started has been tested with LinkServer version ``1.2.45``. 

   Later versions may or may not work, and may need modification to the Getting Started steps.

`LinkServer <https://www.nxp.com/design/software/development-software/mcuxpresso-software-and-tools-/linkserver-for-microcontrollers:LINKERSERVER>`__ is needed to flash the board.

Once installed, ``LinkServer_xxx/binaries`` folder must be set on your Path. To do so: 

* Open the ``Edit the system environment variables`` application on Windows.
* Click on the ``Environment Variables...`` button.
* Select ``Path`` variable under the ``User variables`` section and edit it.
* Click on ``New`` and point to the ``binaries`` folder located where you installed LinkServer (e.g. ``nxp/LinkServer_1.2.45/binaries``).

Get Demo-Wearable-VG MicroEJ Application
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For this Getting Started, the ``Demo-Wearable-VG`` MicroEJ Application will be use. You can download it using the following command::
   
   git clone xxxxx

Set up the MicroEJ Application on your IDE
------------------------------------------

Import the project
^^^^^^^^^^^^^^^^^^

The first step is to import the ``Demo-Wearable-VG`` MicroEJ Application into your IDE: 

.. note::
  
   If you are using another IDE than IntelliJ IDEA, please have a look at :ref:`sdk_6_import_project` section.


* If you are in the Welcome Screen, click on the :guilabel:`Open` button. Otherwise click either on :guilabel:`File` > :guilabel:`Open...` or on :guilabel:`File` > :guilabel:`New` > :guilabel:`Project From Existing Sources...`.
* Select the ``J0215_Demo-Wearable-VGLite`` directory located where you clone the git repository and click on the ``OK`` button.

      .. figure:: images/getting-started-import-demo-application.png
         :alt: Import demo application
         :align: center
         :scale: 70%

* If you are asked to choose a project model, select :guilabel:`Gradle`. 

      .. figure:: images/intellij-import-gradle-project-01.png
         :alt: Import demo application
         :align: center
         :scale: 70%

* Click on the ``Create`` button.

The Gradle project should now be imported in IntelliJ IDEA, your workspace contains the following projects: 

      .. figure:: images/getting-started-workspace-view.png
         :alt: Workspace view
         :align: center
         :scale: 70%

Run an application on the Virtual Device
----------------------------------------

In order to execute the ``Demo-Wearable-VG`` Application on the Virtual Device, the SDK provides the Gradle ``runOnSimulator`` task. 

.. note::
  
   If you are using another IDE than IntelliJ IDEA, please have a look at :ref:`sdk_6_run_on_simulator` section.

* Double-click on the ``runOnSimulator`` task in the Gradle tasks view. It may takes few seconds.

      .. figure:: images/getting-started-runOnSimulator.png
         :alt: runOnSimulator task
         :align: center
         :scale: 70%

The Virtual Device starts and executes the ``Demo-Wearable-VG`` application.

      .. figure:: images/getting-started-virtual-device.png
         :alt: Virtual Device
         :align: center
         :scale: 70%

.. note::
  
   If you want to know more about the use of the ``Demo-Wearable-VG``, please have a look at its `Readme <https://github.com/MicroEJ/Demo-Wearable-VG/blob/master/watch-vg/README.md>`__.


Run an application on i.MX RT595 EVK
------------------------------------

To deploy ``Demo-Wearable-VG`` application on your board, you will have to:

* Get an Evaluation License
* Build the Executable
* Flash the board

Build the Executable for i.MX RT595 EVK
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In order to build the Executable of the ``Demo-Wearable-VG`` Application, the SDK provides the Gradle ``buildExecutable`` task.

.. note::
  
   If you are using another IDE than IntelliJ IDEA, please have a look at :ref:`sdk_6_build_executable` section.
   Come back on this page if you need to activate an Evaluation License.

* Double-click on the ``buildExecutable`` task in the Gradle tasks view.
* The build stops with a failure.
* Go to the top project in the console view and scroll up to get the following error message:

      .. figure:: images/getting-started-console-output-license-uid.png
         :alt: Console Output License UID
         :align: center
         :scale: 70%

* Copy the UID. It will be required to activate your Evaluation license.

Request your Evaluation License:

* Request your Evaluation license by following the :ref:`evaluation_license_request_activation_key` instructions. You will be asked to fill the machine UID you just copied before.

* When you have received your activation key by email, drop it in the license directory by following the :ref:`evaluation_license_install_license_key` instructions (drop the license key zip file to the ``~/.microej/licenses/`` directory).

Now your Evaluation license is installed, you can relaunch your application build by double-clicking on the ``buildExecutable`` task in the Gradle tasks view

The gradle task deploys the MicroEJ application in the BSP and then builds the BSP using Make.

The ``Demo-Wearable-VG`` application is built and ready to be flashed on i.MX RT595 EVK once the hardware setup is completed.

Hardware Setup
^^^^^^^^^^^^^^

      .. figure:: images/getting-started-hardware-setup.png
         :alt: Hardware Setup
         :align: center
         :scale: 70%

Setup the i.MX RT595 EVK:

* Check that the dip switches (SW7) are set to OFF, OFF and ON (ISP0, ISP1, ISP2).
* Ensure jumpers JP18 and JP19 are closed.
* Remove jumper JP4.
* Connect the micro-USB cable to J40 to power the board.

The USB connection is used as a serial console for the SoC, as a CMSIS-DAP debugger, and as a power input for the board.

A COM port is automatically mounted when the board is plugged into a computer using a USB cable. All board logs are available through this COM port.

The COM port uses the following parameters:

.. list-table::
   :header-rows: 1
   :widths: 10 10 10 10 10

   * - Baudrate
     - Data bits
     - Parity bits
     - Stop bits
     - Flow control
   * - 115200
     - 8
     - None
     - 1
     - None

You can have a look at your application logs with an RS232 Terminal (e.g. `Termite <https://www.compuphase.com/software_termite.htm>`__).

Flash the application on the i.MX RT595 EVK board
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In order to flash the ``Demo-Wearable-VG`` Application on i.MX RT595 EVK, the application provides the Gradle ``runOnDevice`` task.

.. note::
  
   If you are using another IDE than IntelliJ IDEA, please have a look at :ref:`sdk_6_run_on_device` section.

* Double-click on the ``runOnDevice`` task in the Gradle tasks view.

      .. figure:: images/getting-started-runOnDevice.png
         :alt: runOnDevice task
         :align: center
         :scale: 70%

Once the firmware is flashed, you should see the ``Demo-Wearable-VG`` running on your board.

..
   | Copyright 2008-2023, MicroEJ Corp. Content in this space is free 
   for read and redistribute. Except if otherwise stated, modification 
   is subject to MicroEJ Corp prior approval.
   | MicroEJ is a trademark of MicroEJ Corp. All other trademarks and 
   copyrights are the property of their respective owners.