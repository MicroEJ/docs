<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="_m_j_v_m___m_o_n_i_t_o_r_8h" kind="file" language="C++">
    <compoundname>MJVM_MONITOR.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes refid="_m_j_v_m___m_o_n_i_t_o_r__types_8h" local="yes">MJVM_MONITOR_types.h</includes>
    <incdepgraph>
      <node id="1">
        <label>LLMJVM_MONITOR/MJVM_MONITOR.h</label>
        <link refid="_m_j_v_m___m_o_n_i_t_o_r_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>MJVM_MONITOR_types.h</label>
        <link refid="_m_j_v_m___m_o_n_i_t_o_r__types_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="_m_j_v_m___m_o_n_i_t_o_r_8h_1adebc3bb813fbd10d7a6a04fb74caa311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t MJVM_MONITOR_get_threads_ids</definition>
        <argsstring>(int32_t *threads_ids, int32_t threads_ids_length)</argsstring>
        <name>MJVM_MONITOR_get_threads_ids</name>
        <param>
          <type>int32_t *</type>
          <declname>threads_ids</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>threads_ids_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills in the int32_t array <computeroutput>threads_ids</computeroutput> with the ID of the alive Java threads.</para>
<para>If the given array is not large enough to contains all the Java threads IDs, the <computeroutput>threads_ids_length</computeroutput> first Java threads IDs are stored. </para>
<para>This function must be called within the Core Engine task.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threads_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an int32_t array of <computeroutput>threads_ids_length</computeroutput> elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threads_ids_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of <computeroutput>threads_ids</computeroutput> array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of alive Java threads or <computeroutput>MJVM_MONITOR_ERROR</computeroutput> if this function is not called within the Core Engine task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLMJVM_MONITOR/MJVM_MONITOR.h" line="37" column="9" declfile="LLMJVM_MONITOR/MJVM_MONITOR.h" declline="37" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="_m_j_v_m___m_o_n_i_t_o_r_8h_1a963b33bcbb53c6850d7502c09eb23ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t MJVM_MONITOR_get_thread_info</definition>
        <argsstring>(int32_t thread_id, MJVM_MONITOR_thread_info_t *thread_info, char *name, int32_t name_length)</argsstring>
        <name>MJVM_MONITOR_get_thread_info</name>
        <param>
          <type>int32_t</type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="struct_m_j_v_m___m_o_n_i_t_o_r__thread__info__t" kindref="compound">MJVM_MONITOR_thread_info_t</ref> *</type>
          <declname>thread_info</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>name_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills in the given <computeroutput>thread_info</computeroutput> structure and <computeroutput>name</computeroutput> array with the info of the thread and the name of the thread. </para>
<para>Given <computeroutput>name</computeroutput> array may null. In this case, the name of the thread is not filled in. If given <computeroutput>name</computeroutput> array is not large enough to copy the name of the thread, then the name is truncated to <computeroutput>name_length</computeroutput>-1 characters (last character is &apos;\0&apos;). </para>
<para>This function must be called within the Core Engine task.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the thread.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_info</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the structure to fill in.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a char array to fill in with the name of the thread. May be null.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length in bytes of the given <computeroutput>name</computeroutput> array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>MJVM_MONITOR_OK</computeroutput> on success, <computeroutput>MJVM_MONITOR_INVALID_THREAD_ID</computeroutput> if the given thread ID is invalid, <computeroutput>MJVM_MONITOR_INVALID_THREAD_INFO</computeroutput> if <computeroutput>thread_info</computeroutput> is null </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLMJVM_MONITOR/MJVM_MONITOR.h" line="65" column="9" declfile="LLMJVM_MONITOR/MJVM_MONITOR.h" declline="65" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="_m_j_v_m___m_o_n_i_t_o_r_8h_1a7f1f976b1be383d2768983aa8e898729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MJVM_MONITOR_dump_vm</definition>
        <argsstring>(void)</argsstring>
        <name>MJVM_MONITOR_dump_vm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the state of the Core Engine to the standard output stream. For each Java thread, the Java stack trace, the name, the state and the priority are printed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLMJVM_MONITOR/MJVM_MONITOR.h" line="71" column="6" declfile="LLMJVM_MONITOR/MJVM_MONITOR.h" declline="71" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Core Engine monitoring library API. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>MicroEJ Developer Team </para>
</simplesect>
<simplesect kind="version"><para>1.0.0 </para>
</simplesect>
<simplesect kind="date"><para>7 June 2017 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>C</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2015-2024<sp/>MicroEJ<sp/>Corp.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>library<sp/>is<sp/>provided<sp/>in<sp/>source<sp/>code<sp/>for<sp/>use,<sp/>modification<sp/>and<sp/>test,<sp/>subject<sp/>to<sp/>license<sp/>terms.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Any<sp/>modification<sp/>of<sp/>the<sp/>source<sp/>code<sp/>will<sp/>break<sp/>MicroEJ<sp/>Corp.<sp/>warranties<sp/>on<sp/>the<sp/>whole<sp/>library.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MJVM_MONITOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MJVM_MONITOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_m_j_v_m___m_o_n_i_t_o_r__types_8h" kindref="compound">MJVM_MONITOR_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="_m_j_v_m___m_o_n_i_t_o_r_8h_1adebc3bb813fbd10d7a6a04fb74caa311" refkind="member"><highlight class="normal">int32_t<sp/><ref refid="_m_j_v_m___m_o_n_i_t_o_r_8h_1adebc3bb813fbd10d7a6a04fb74caa311" kindref="member">MJVM_MONITOR_get_threads_ids</ref>(int32_t*<sp/>threads_ids,<sp/>int32_t<sp/>threads_ids_length);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="_m_j_v_m___m_o_n_i_t_o_r_8h_1a963b33bcbb53c6850d7502c09eb23ae7" refkind="member"><highlight class="normal">int32_t<sp/><ref refid="_m_j_v_m___m_o_n_i_t_o_r_8h_1a963b33bcbb53c6850d7502c09eb23ae7" kindref="member">MJVM_MONITOR_get_thread_info</ref>(int32_t<sp/>thread_id,<sp/><ref refid="struct_m_j_v_m___m_o_n_i_t_o_r__thread__info__t" kindref="compound">MJVM_MONITOR_thread_info_t</ref>*<sp/>thread_info,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/>int32_t<sp/>name_length);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="_m_j_v_m___m_o_n_i_t_o_r_8h_1a7f1f976b1be383d2768983aa8e898729" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_j_v_m___m_o_n_i_t_o_r_8h_1a7f1f976b1be383d2768983aa8e898729" kindref="member">MJVM_MONITOR_dump_vm</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MJVM_MONITOR_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="LLMJVM_MONITOR/MJVM_MONITOR.h"/>
  </compounddef>
</doxygen>
