<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="_l_l_t_r_a_c_e__impl_8h" kind="file" language="C++">
    <compoundname>LLTRACE_impl.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <incdepgraph>
      <node id="1">
        <label>LLTRACE/LLTRACE_impl.h</label>
        <link refid="_l_l_t_r_a_c_e__impl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_start</definition>
        <argsstring>(void)</argsstring>
        <name>LLTRACE_IMPL_start</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts to record the events. </para>
<para>By default, the trace system is stopped. </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="34" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1a849898f936acd464bb4002da862bc578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_stop</definition>
        <argsstring>(void)</argsstring>
        <name>LLTRACE_IMPL_stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stops to record the events. When the record system is stopped, any call to the <computeroutput>LLTRACE_IMPL_record_event_*</computeroutput> functions must not record any events. </para>
<para>By default, the trace system is stopped. </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="46" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1a9c220101aff3c305bd376cfa018b7b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LLTRACE_IMPL_is_started</definition>
        <argsstring>(void)</argsstring>
        <name>LLTRACE_IMPL_is_started</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests whether the trace system is started or not. </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the trace system is started, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="57" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="57" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t LLTRACE_IMPL_declare_event_group</definition>
        <argsstring>(const char *group_name, int32_t nb_event_types)</argsstring>
        <name>LLTRACE_IMPL_declare_event_group</name>
        <param>
          <type>const char *</type>
          <declname>group_name</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>nb_event_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declare a new group of events with the given name. The created group will define <computeroutput>nb_event_types</computeroutput> types of events. The event IDs available for this group are from 0 to <computeroutput>nb_event_types</computeroutput>-1. </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name that identifies the group. Must not be null.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_event_types</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of event types available for the group.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the ID of the created group or -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="75" column="9" declfile="LLTRACE/LLTRACE_impl.h" declline="75" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1a17c423daeca9723e8a9aa47988115142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_record_event_void</definition>
        <argsstring>(int32_t group_id, int32_t event_id)</argsstring>
        <name>LLTRACE_IMPL_record_event_void</name>
        <param>
          <type>int32_t</type>
          <declname>group_id</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Record an event for the given group. The given event ID must be valid for the specified group (i.e., between 0 and <computeroutput>nb_event_types</computeroutput>-1 included where <computeroutput>nb_event_types</computeroutput> is the value given to <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>). </para>
<para>The record is done only if the trace system is started (see <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" kindref="member">LLTRACE_IMPL_start()</ref></computeroutput>). </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the group returned by <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="94" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1ae37344828e07b342c4708336833b480b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_record_event_u32</definition>
        <argsstring>(int32_t group_id, int32_t event_id, uint32_t value1)</argsstring>
        <name>LLTRACE_IMPL_record_event_u32</name>
        <param>
          <type>int32_t</type>
          <declname>group_id</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Record an event for the given group. The given event ID must be valid for the specified group (i.e., between 0 and <computeroutput>nb_event_types</computeroutput>-1 included where <computeroutput>nb_event_types</computeroutput> is the value given to <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>). </para>
<para>The record is done only if the trace system is started (see <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" kindref="member">LLTRACE_IMPL_start()</ref></computeroutput>). </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the group returned by <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="116" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1a296f0f5ed64bfab8439adcd97de655a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_record_event_u32x2</definition>
        <argsstring>(int32_t group_id, int32_t event_id, uint32_t value1, uint32_t value2)</argsstring>
        <name>LLTRACE_IMPL_record_event_u32x2</name>
        <param>
          <type>int32_t</type>
          <declname>group_id</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Record an event for the given group. The given event ID must be valid for the specified group (i.e., between 0 and <computeroutput>nb_event_types</computeroutput>-1 included where <computeroutput>nb_event_types</computeroutput> is the value given to <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>). </para>
<para>The record is done only if the trace system is started (see <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" kindref="member">LLTRACE_IMPL_start()</ref></computeroutput>). </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the group returned by <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="141" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="141" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1a414cdb13e34273d34fe7a5672a80f56e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_record_event_u32x3</definition>
        <argsstring>(int32_t group_id, int32_t event_id, uint32_t value1, uint32_t value2, uint32_t value3)</argsstring>
        <name>LLTRACE_IMPL_record_event_u32x3</name>
        <param>
          <type>int32_t</type>
          <declname>group_id</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value2</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Record an event for the given group. The given event ID must be valid for the specified group (i.e., between 0 and <computeroutput>nb_event_types</computeroutput>-1 included where <computeroutput>nb_event_types</computeroutput> is the value given to <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>). </para>
<para>The record is done only if the trace system is started (see <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" kindref="member">LLTRACE_IMPL_start()</ref></computeroutput>). </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the group returned by <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value3</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="169" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="169" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1a8bddff2f73568b99e5f2ed7b8bb0adcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_record_event_u32x4</definition>
        <argsstring>(int32_t group_id, int32_t event_id, uint32_t value1, uint32_t value2, uint32_t value3, uint32_t value4)</argsstring>
        <name>LLTRACE_IMPL_record_event_u32x4</name>
        <param>
          <type>int32_t</type>
          <declname>group_id</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value2</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value3</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Record an event for the given group. The given event ID must be valid for the specified group (i.e., between 0 and <computeroutput>nb_event_types</computeroutput>-1 included where <computeroutput>nb_event_types</computeroutput> is the value given to <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>). </para>
<para>The record is done only if the trace system is started (see <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" kindref="member">LLTRACE_IMPL_start()</ref></computeroutput>). </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the group returned by <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value3</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value4</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="200" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="200" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1a09463d40bb5fc5d4274d6161b3cc8b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_record_event_u32x5</definition>
        <argsstring>(int32_t group_id, int32_t event_id, uint32_t value1, uint32_t value2, uint32_t value3, uint32_t value4, uint32_t value5)</argsstring>
        <name>LLTRACE_IMPL_record_event_u32x5</name>
        <param>
          <type>int32_t</type>
          <declname>group_id</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value2</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value3</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value4</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Record an event for the given group. The given event ID must be valid for the specified group (i.e., between 0 and <computeroutput>nb_event_types</computeroutput>-1 included where <computeroutput>nb_event_types</computeroutput> is the value given to <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>). </para>
<para>The record is done only if the trace system is started (see <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" kindref="member">LLTRACE_IMPL_start()</ref></computeroutput>). </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the group returned by <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value3</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value4</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value5</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="234" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="234" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1af450f73e3674e7bd23c6646eb0b50142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_record_event_u32x6</definition>
        <argsstring>(int32_t group_id, int32_t event_id, uint32_t value1, uint32_t value2, uint32_t value3, uint32_t value4, uint32_t value5, uint32_t value6)</argsstring>
        <name>LLTRACE_IMPL_record_event_u32x6</name>
        <param>
          <type>int32_t</type>
          <declname>group_id</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value2</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value3</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value4</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value5</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Record an event for the given group. The given event ID must be valid for the specified group (i.e., between 0 and <computeroutput>nb_event_types</computeroutput>-1 included where <computeroutput>nb_event_types</computeroutput> is the value given to <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>). </para>
<para>The record is done only if the trace system is started (see <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" kindref="member">LLTRACE_IMPL_start()</ref></computeroutput>). </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the group returned by <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value3</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value4</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value5</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value6</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="271" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="271" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1a768cbd8bfc57f8e588939d90d03fee82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_record_event_u32x7</definition>
        <argsstring>(int32_t group_id, int32_t event_id, uint32_t value1, uint32_t value2, uint32_t value3, uint32_t value4, uint32_t value5, uint32_t value6, uint32_t value7)</argsstring>
        <name>LLTRACE_IMPL_record_event_u32x7</name>
        <param>
          <type>int32_t</type>
          <declname>group_id</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value2</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value3</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value4</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value5</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value6</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Record an event for the given group. The given event ID must be valid for the specified group (i.e., between 0 and <computeroutput>nb_event_types</computeroutput>-1 included where <computeroutput>nb_event_types</computeroutput> is the value given to <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>). </para>
<para>The record is done only if the trace system is started (see <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" kindref="member">LLTRACE_IMPL_start()</ref></computeroutput>). </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the group returned by <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value3</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value4</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value5</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value6</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value7</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="311" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="311" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1a7bcc1c820829c7698a617818c249b309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_record_event_u32x8</definition>
        <argsstring>(int32_t group_id, int32_t event_id, uint32_t value1, uint32_t value2, uint32_t value3, uint32_t value4, uint32_t value5, uint32_t value6, uint32_t value7, uint32_t value8)</argsstring>
        <name>LLTRACE_IMPL_record_event_u32x8</name>
        <param>
          <type>int32_t</type>
          <declname>group_id</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value2</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value3</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value4</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value5</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value6</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value7</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Record an event for the given group. The given event ID must be valid for the specified group (i.e., between 0 and <computeroutput>nb_event_types</computeroutput>-1 included where <computeroutput>nb_event_types</computeroutput> is the value given to <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>). </para>
<para>The record is done only if the trace system is started (see <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" kindref="member">LLTRACE_IMPL_start()</ref></computeroutput>). </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the group returned by <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value3</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value4</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value5</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value6</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value7</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value8</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="354" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="354" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1abce66228c455ed74c06ae32e4492d354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_record_event_u32x9</definition>
        <argsstring>(int32_t group_id, int32_t event_id, uint32_t value1, uint32_t value2, uint32_t value3, uint32_t value4, uint32_t value5, uint32_t value6, uint32_t value7, uint32_t value8, uint32_t value9)</argsstring>
        <name>LLTRACE_IMPL_record_event_u32x9</name>
        <param>
          <type>int32_t</type>
          <declname>group_id</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value2</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value3</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value4</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value5</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value6</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value7</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value8</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value9</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Record an event for the given group. The given event ID must be valid for the specified group (i.e., between 0 and <computeroutput>nb_event_types</computeroutput>-1 included where <computeroutput>nb_event_types</computeroutput> is the value given to <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>). </para>
<para>The record is done only if the trace system is started (see <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" kindref="member">LLTRACE_IMPL_start()</ref></computeroutput>). </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the group returned by <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value3</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value4</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value5</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value6</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value7</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value8</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value9</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="400" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="400" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1a54a579926fe53540e5bfeea19ac7c2f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_record_event_u32x10</definition>
        <argsstring>(int32_t group_id, int32_t event_id, uint32_t value1, uint32_t value2, uint32_t value3, uint32_t value4, uint32_t value5, uint32_t value6, uint32_t value7, uint32_t value8, uint32_t value9, uint32_t value10)</argsstring>
        <name>LLTRACE_IMPL_record_event_u32x10</name>
        <param>
          <type>int32_t</type>
          <declname>group_id</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value2</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value3</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value4</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value5</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value6</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value7</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value8</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value9</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value10</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Record an event for the given group. The given event ID must be valid for the specified group (i.e., between 0 and <computeroutput>nb_event_types</computeroutput>-1 included where <computeroutput>nb_event_types</computeroutput> is the value given to <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>). </para>
<para>The record is done only if the trace system is started (see <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" kindref="member">LLTRACE_IMPL_start()</ref></computeroutput>). </para>
<para>This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the group returned by <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value3</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value4</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value5</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value6</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value7</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value8</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value9</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value10</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="449" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="449" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1a8bfd74e266aa6bf7ec19bc0ba894966e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_record_event_end</definition>
        <argsstring>(int32_t group_id, int32_t event_id)</argsstring>
        <name>LLTRACE_IMPL_record_event_end</name>
        <param>
          <type>int32_t</type>
          <declname>group_id</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Record the end of the execution of an event for the given group. Call this function to trace the duration of an event previously record with one of the <computeroutput>LLTRACE_IMPL_record_event_*()<computeroutput> function. This function should not be called for event that has no duration. </computeroutput></computeroutput></para>
<para><computeroutput><computeroutput> For example, if you want to trace the execution of a function, you can call <computeroutput>LLTRACE_IMPL_record_event_*()<computeroutput> at the beginning of the function and <computeroutput>LLTRACE_IMPL_record_event_end*()</computeroutput> at the end of the function. </computeroutput></computeroutput></computeroutput></computeroutput></para>
<para><computeroutput><computeroutput><computeroutput><computeroutput> The given event ID must be valid for the specified group (i.e., between 0 and <computeroutput>nb_event_types</computeroutput>-1 included where <computeroutput>nb_event_types</computeroutput> is the value given to <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>). </computeroutput></computeroutput></computeroutput></computeroutput></para>
<para><computeroutput><computeroutput><computeroutput><computeroutput> The record is done only if the trace system is started (see <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" kindref="member">LLTRACE_IMPL_start()</ref></computeroutput>). </computeroutput></computeroutput></computeroutput></computeroutput></para>
<para><computeroutput><computeroutput><computeroutput><computeroutput> This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</computeroutput></computeroutput></computeroutput></computeroutput></para>
<para><computeroutput><computeroutput><computeroutput><computeroutput><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the group returned by <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</computeroutput></computeroutput></computeroutput></computeroutput></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="475" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="475" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_l_l_t_r_a_c_e__impl_8h_1ae4b98077f778483a78ae0720574db284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LLTRACE_IMPL_record_event_end_u32</definition>
        <argsstring>(int32_t group_id, int32_t event_id, uint32_t value1)</argsstring>
        <name>LLTRACE_IMPL_record_event_end_u32</name>
        <param>
          <type>int32_t</type>
          <declname>group_id</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Record the end of the execution of an event for the given group. Call this function to trace the duration of an event previously record with one of the <computeroutput>LLTRACE_IMPL_record_event_()<computeroutput> function. This function should not be called for event that has no duration. </computeroutput></computeroutput></para>
<para><computeroutput><computeroutput> For example, if you want to trace the execution of a function, you can call <computeroutput>LLTRACE_IMPL_record_event_*()<computeroutput> at the beginning of the function and <computeroutput>LLTRACE_IMPL_record_event_end*()</computeroutput> at the end of the function. </computeroutput></computeroutput></computeroutput></computeroutput></para>
<para><computeroutput><computeroutput><computeroutput><computeroutput> The given event ID must be valid for the specified group (i.e., between 0 and <computeroutput>nb_event_types</computeroutput>-1 included where <computeroutput>nb_event_types</computeroutput> is the value given to <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>). </computeroutput></computeroutput></computeroutput></computeroutput></para>
<para><computeroutput><computeroutput><computeroutput><computeroutput> The record is done only if the trace system is started (see <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" kindref="member">LLTRACE_IMPL_start()</ref></computeroutput>). </computeroutput></computeroutput></computeroutput></computeroutput></para>
<para><computeroutput><computeroutput><computeroutput><computeroutput> This function must not be called by the application. Use the corresponding function <computeroutput>TRACE_*()</computeroutput>.</computeroutput></computeroutput></computeroutput></computeroutput></para>
<para><computeroutput><computeroutput><computeroutput><computeroutput><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the group returned by <computeroutput><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group()</ref></computeroutput>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the event.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>custom value for the event end. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</computeroutput></computeroutput></computeroutput></computeroutput></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="LLTRACE/LLTRACE_impl.h" line="504" column="6" declfile="LLTRACE/LLTRACE_impl.h" declline="504" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Trace library low level API. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>MicroEJ Developer Team </para>
</simplesect>
<simplesect kind="version"><para>1.0.0 </para>
</simplesect>
<simplesect kind="date"><para>1 June 2017 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>C</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2017-2024<sp/>MicroEJ<sp/>Corp.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>library<sp/>is<sp/>provided<sp/>in<sp/>source<sp/>code<sp/>for<sp/>use,<sp/>modification<sp/>and<sp/>test,<sp/>subject<sp/>to<sp/>license<sp/>terms.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Any<sp/>modification<sp/>of<sp/>the<sp/>source<sp/>code<sp/>will<sp/>break<sp/>MicroEJ<sp/>Corp.<sp/>warranties<sp/>on<sp/>the<sp/>whole<sp/>library.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LLTRACE_IMPL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LLTRACE_IMPL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1a6a75c49a8c9e47d58ebc1f9da3eabd89" kindref="member">LLTRACE_IMPL_start</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="_l_l_t_r_a_c_e__impl_8h_1a849898f936acd464bb4002da862bc578" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1a849898f936acd464bb4002da862bc578" kindref="member">LLTRACE_IMPL_stop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="_l_l_t_r_a_c_e__impl_8h_1a9c220101aff3c305bd376cfa018b7b95" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1a9c220101aff3c305bd376cfa018b7b95" kindref="member">LLTRACE_IMPL_is_started</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" refkind="member"><highlight class="normal">int32_t<sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1a15bf729eca1d3e43dfd2b4c1856e7450" kindref="member">LLTRACE_IMPL_declare_event_group</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>group_name,<sp/>int32_t<sp/>nb_event_types);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="_l_l_t_r_a_c_e__impl_8h_1a17c423daeca9723e8a9aa47988115142" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1a17c423daeca9723e8a9aa47988115142" kindref="member">LLTRACE_IMPL_record_event_void</ref>(int32_t<sp/>group_id,<sp/>int32_t<sp/>event_id);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="_l_l_t_r_a_c_e__impl_8h_1ae37344828e07b342c4708336833b480b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1ae37344828e07b342c4708336833b480b" kindref="member">LLTRACE_IMPL_record_event_u32</ref>(int32_t<sp/>group_id,<sp/>int32_t<sp/>event_id,<sp/>uint32_t<sp/>value1);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="_l_l_t_r_a_c_e__impl_8h_1a296f0f5ed64bfab8439adcd97de655a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1a296f0f5ed64bfab8439adcd97de655a1" kindref="member">LLTRACE_IMPL_record_event_u32x2</ref>(int32_t<sp/>group_id,<sp/>int32_t<sp/>event_id,<sp/>uint32_t<sp/>value1,<sp/>uint32_t<sp/>value2);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="_l_l_t_r_a_c_e__impl_8h_1a414cdb13e34273d34fe7a5672a80f56e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1a414cdb13e34273d34fe7a5672a80f56e" kindref="member">LLTRACE_IMPL_record_event_u32x3</ref>(int32_t<sp/>group_id,<sp/>int32_t<sp/>event_id,<sp/>uint32_t<sp/>value1,<sp/>uint32_t<sp/>value2,<sp/>uint32_t<sp/>value3);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="_l_l_t_r_a_c_e__impl_8h_1a8bddff2f73568b99e5f2ed7b8bb0adcd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1a8bddff2f73568b99e5f2ed7b8bb0adcd" kindref="member">LLTRACE_IMPL_record_event_u32x4</ref>(int32_t<sp/>group_id,<sp/>int32_t<sp/>event_id,<sp/>uint32_t<sp/>value1,<sp/>uint32_t<sp/>value2,<sp/>uint32_t<sp/>value3,<sp/>uint32_t<sp/>value4);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="_l_l_t_r_a_c_e__impl_8h_1a09463d40bb5fc5d4274d6161b3cc8b39" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1a09463d40bb5fc5d4274d6161b3cc8b39" kindref="member">LLTRACE_IMPL_record_event_u32x5</ref>(int32_t<sp/>group_id,<sp/>int32_t<sp/>event_id,<sp/>uint32_t<sp/>value1,<sp/>uint32_t<sp/>value2,<sp/>uint32_t<sp/>value3,<sp/>uint32_t<sp/>value4,<sp/>uint32_t<sp/>value5);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="_l_l_t_r_a_c_e__impl_8h_1af450f73e3674e7bd23c6646eb0b50142" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1af450f73e3674e7bd23c6646eb0b50142" kindref="member">LLTRACE_IMPL_record_event_u32x6</ref>(int32_t<sp/>group_id,<sp/>int32_t<sp/>event_id,<sp/>uint32_t<sp/>value1,<sp/>uint32_t<sp/>value2,<sp/>uint32_t<sp/>value3,<sp/>uint32_t<sp/>value4,<sp/>uint32_t<sp/>value5,<sp/>uint32_t<sp/>value6);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="_l_l_t_r_a_c_e__impl_8h_1a768cbd8bfc57f8e588939d90d03fee82" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1a768cbd8bfc57f8e588939d90d03fee82" kindref="member">LLTRACE_IMPL_record_event_u32x7</ref>(int32_t<sp/>group_id,<sp/>int32_t<sp/>event_id,<sp/>uint32_t<sp/>value1,<sp/>uint32_t<sp/>value2,<sp/>uint32_t<sp/>value3,<sp/>uint32_t<sp/>value4,<sp/>uint32_t<sp/>value5,<sp/>uint32_t<sp/>value6,<sp/>uint32_t<sp/>value7);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="_l_l_t_r_a_c_e__impl_8h_1a7bcc1c820829c7698a617818c249b309" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1a7bcc1c820829c7698a617818c249b309" kindref="member">LLTRACE_IMPL_record_event_u32x8</ref>(int32_t<sp/>group_id,<sp/>int32_t<sp/>event_id,<sp/>uint32_t<sp/>value1,<sp/>uint32_t<sp/>value2,<sp/>uint32_t<sp/>value3,<sp/>uint32_t<sp/>value4,<sp/>uint32_t<sp/>value5,<sp/>uint32_t<sp/>value6,<sp/>uint32_t<sp/>value7,<sp/>uint32_t<sp/>value8);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="_l_l_t_r_a_c_e__impl_8h_1abce66228c455ed74c06ae32e4492d354" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1abce66228c455ed74c06ae32e4492d354" kindref="member">LLTRACE_IMPL_record_event_u32x9</ref>(int32_t<sp/>group_id,<sp/>int32_t<sp/>event_id,<sp/>uint32_t<sp/>value1,<sp/>uint32_t<sp/>value2,<sp/>uint32_t<sp/>value3,<sp/>uint32_t<sp/>value4,<sp/>uint32_t<sp/>value5,<sp/>uint32_t<sp/>value6,<sp/>uint32_t<sp/>value7,<sp/>uint32_t<sp/>value8,<sp/>uint32_t<sp/>value9);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="_l_l_t_r_a_c_e__impl_8h_1a54a579926fe53540e5bfeea19ac7c2f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1a54a579926fe53540e5bfeea19ac7c2f8" kindref="member">LLTRACE_IMPL_record_event_u32x10</ref>(int32_t<sp/>group_id,<sp/>int32_t<sp/>event_id,<sp/>uint32_t<sp/>value1,<sp/>uint32_t<sp/>value2,<sp/>uint32_t<sp/>value3,<sp/>uint32_t<sp/>value4,<sp/>uint32_t<sp/>value5,<sp/>uint32_t<sp/>value6,<sp/>uint32_t<sp/>value7,<sp/>uint32_t<sp/>value8,<sp/>uint32_t<sp/>value9,<sp/>uint32_t<sp/>value10);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="_l_l_t_r_a_c_e__impl_8h_1a8bfd74e266aa6bf7ec19bc0ba894966e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1a8bfd74e266aa6bf7ec19bc0ba894966e" kindref="member">LLTRACE_IMPL_record_event_end</ref>(int32_t<sp/>group_id,<sp/>int32_t<sp/>event_id);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="504" refid="_l_l_t_r_a_c_e__impl_8h_1ae4b98077f778483a78ae0720574db284" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_l_l_t_r_a_c_e__impl_8h_1ae4b98077f778483a78ae0720574db284" kindref="member">LLTRACE_IMPL_record_event_end_u32</ref>(int32_t<sp/>group_id,<sp/>int32_t<sp/>event_id,<sp/>uint32_t<sp/>value1);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//LLTRACE_IMPL_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="LLTRACE/LLTRACE_impl.h"/>
  </compounddef>
</doxygen>
