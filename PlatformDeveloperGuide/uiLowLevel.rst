.. _section_ui_low_level:

=============
Low Level API
=============


Principle
=========

The MicroUI implementation for MicroEJ requires a low level implementation. This low level implementation finalizes the MicroUI implementation started with the static initialization step (see :ref:`section_static_init`) for a given MicroEJ platform.

The low level implementation consists of a set of headers files to implement in C to target the hardware drivers. Some functions are mandatory, others are not. Some others headers files are also available to call UI engines internal functions.

For the simulator, some Front Panel interfaces and classes allow to specify the simulated platform characteristics. 

Embedded Platform
=================

.. figure:: images/ui_llapi_emb.*
   :alt: MicroUI Low-Level
   :width: 100.0%
   :align: center

   MicroUI Embedded Low-Level API

The specification of header files names is:

- Name start with ``LLUI_`` 
- Second part name refers the UI engine: ``DISPLAY``, ``INPUT``, ``LED``
- Files whose name ends with ``_impl`` list functions to implement over hardware
- Files whose name has no suffix list internal UI engines functions.

There are some exceptions :

- ``LLUI_PAINTER_impl.h`` and ``LLDW_PAINTER_impl.h`` list a subpart of UI graphical engine functions to implement (all MicroUI native drawings methods)
- ``ui_drawing.h`` and ``dw_drawing.h`` list all drawings methods the platform can implement.
- ``ui_drawing_soft.h`` and ``dw_drawing_soft.h`` list all drawings methods implemented by the graphical engine.
- ``microui_constants.h`` is the file generated by the MicroUI Static Initializer (see :ref:`section_static_init`);

All header files and their aims are described in next UI engines chapters.

Simulator
=========

.. figure:: images/ui_llapi_sim.*
   :alt: MicroUI Low-Level
   :width: 100.0%
   :align: center

   MicroUI Simulator Low-Level API

In the simulator the three UI engines are grouped in a mock called Front Panel. The Front Panel comes with a set of classes and interfaces which require the same implementation than the embedded platform or which propose the same internal methods.

The specification of classes names is:

- Package are the same than the MicroUI library (``ej.microui.display``, ``ej.microui.event``, ``ej.microui.led``)
- Name start with ``LLUI`` 
- Second part name refers the UI engine: ``Display``, ``Input``, ``Led``
- Files whose name ends with  ``Impl`` list methods to implement like embedded platform
- Files whose name has no suffix list internal UI engines functions.

There are some exceptions :

- ``LLUIPainter.java`` and ``LLDWPainter.java`` list a subpart of UI graphical engine functions (all MicroUI native drawings methods)
- ``UIDrawing.java`` and ``DWDrawing.java`` list all drawings methods the platform can implement (and already implemented by the graphical engine).
- ``EventXXX`` list methods to create input events compatible with MicroUI implementation

All files and their aims are described in :ref:`section_simulation`. 

..
   | Copyright 2008-2020, MicroEJ Corp. Content in this space is free 
   for read and redistribute. Except if otherwise stated, modification 
   is subject to MicroEJ Corp prior approval.
   | MicroEJ is a trademark of MicroEJ Corp. All other trademarks and 
   copyrights are the property of their respective owners.
