.. _outputfiles:

Build Output Files
==================

When building a Standalone Application, multiple files are generated next to the ELF executable file.

Launch Output Folder
~~~~~~~~~~~~~~~~~~~~

Using a :ref:`MicroEJ Application Launch <concepts-microejlaunches>`, the files are generated in a folder which is named like the main type and which is located in the output folder specified in the run configuration.

.. tabs::

   .. tab:: Build Output Files from MicroEJ Application Launch (Architecture ``8.x``)

      .. figure:: images/build-output-files_arch8.png
         :alt: Build Output Files from MicroEJ Application Launch
         :align: center

   .. tab:: Build Output Files from MicroEJ Application Launchs (Architecture ``7.x``)   

      .. figure:: images/build-output-files.png
         :alt: Build Output Files from MicroEJ Application Launch
         :align: center

Published Module Files
~~~~~~~~~~~~~~~~~~~~~~

After :ref:`building <mmm_module_build>` the Standalone Application, the published module contains the following main files:

- ``[name]-[version].out``: Firmware (ELF Executable)
- ``[name]-[version].zip``: Virtual Device
- ``[name]-[version]-workingEnv.zip``: Build intermediate files, including the content of the launch output Folder)


.. figure:: images/standalone_application_published_files.png
   :alt:  Published Standalone Application Module Files
   :align: center
   :scale: 70%

   Published Standalone Application Module Files


The SOAR Map File
~~~~~~~~~~~~~~~~~

The ``.map`` file lists every embedded symbol of the application (section, Java class or method, etc.) and its size in ROM or RAM.
This file is called ``<main class>.map`` for architectures equal or greater than  ``8.0``, and ``SOAR.map`` for architectues strictly lower than ``8.0``.
This file can be opened using the :ref:`memorymapanalyzer`.

The embedded symbols are grouped into multiple categories. For example, the ``Object`` class and its methods are grouped in the ``LibFoundationEDC`` category.
For each symbol or each category, you can see its size in ROM (``Image Size``) and RAM (``Runtime Size``).

The SOAR groups all the Java strings in the same section, which appears in the ``ApplicationStrings`` category.
The same applies to the static fields (``Statics`` category), the types (``Types`` category), and the class names (``ClassNames`` category).

.. _soar_info_file:

The SOAR Information File
~~~~~~~~~~~~~~~~~~~~~~~~~

      Since achitecture ``8.x``, informations that were contained in ``soar/<main class>.xml`` are dispatched in three separated files:

      -  ``soar/<main class>.loadermap`` generated by the SOAR Loader. It contains information about all the class loaded by the SOAR from the classpath.
      -  ``soar/<main class>.selectormap`` generated by the SOAR Selector. It contains information about all the selected classes and methods to be embedded within the application.
      -  ``soar/<main class>.optimizermap`` generated by the SOAR Optimizer. It contains embedded types and method information such as their size.

      Each of these files can be opened with an XML editor.

.. tabs::

   .. tab:: The SOAR Information File (Architecture ``8.x``)

      .. list-table::
         :widths: 25 30 45

         * - **Information**
           - **XML tag>subtag[attribute=value]**
           - **File**
         * - :ref:`classpath <chapter.microej.classpath>`
           - ``classpath``
           - ``soar/<main class>.loadermap``
         * - :ref:`resources <chapter.microej.applicationResources>`
           - ``resources``
           - ``soar/<main class>.loadermap``
         * - :ref:`external resources <chapter.microej.applicationResources>`
           - ``external_resources``
           - ``soar/<main class>.loadermap``
         * - :ref:`system properties <system_properties>` 
           - ``properties``
           - ``soar/<main class>.loadermap``
         * - :ref:`constants <section.classpath.elements.constants>`
           - ``constants``
           - ``soar/<main class>.loadermap``
         * - :ref:`clinit order <soar_clinit>`
           - ``clinit``
           - ``soar/<main class>.selectormap``
         * - selected methods
           - ``methods``
           - ``soar/<main class>.selectormap``
         * - selected statics fields
           - ``statics``
           - ``soar/<main class>.selectormap``
         * - selected interned strings
           - ``strings``
           - ``soar/<main class>.selectormap``
         * - :ref:`types <section.classpath.elements.types>`
           - ``types``
           - ``soar/<main class>.selectormap``
         * - :ref:`embed type name <section.classpath.elements.types>`
           - ``types>type[hasRuntimeName = true]``
           - ``soar/<main class>.loadermap``, ``soar/<main class>.selectormap``
         * - :ref:`immutables <section.classpath.elements.immutables>`
           - N/A
           - N/A
         * - number of types
           - ``types>[nb]``
           - ``soar/<main class>.selectormap``
         * - number of concrete classes
           - ``types[nbConcreteClasses]``
           - ``soar/<main class>.selectormap``
         * - number of abstract classes
           - ``types[nbAbstractClasses]``
           - ``soar/<main class>.selectormap``
         * - number of interfaces
           - ``types[nbInterfaces]``
           - ``soar/<main class>.selectormap``
         * - number of arrays
           - ``types[nbArrays]``
           - ``soar/<main class>.selectormap``
         * - type is a :ref:`kernel API <kernel.api>`
           - ``types>type[api=true]``
           - ``soar/<main class>.selectormap``
         * - type instance size
           - ``types>type[instanceSize]``
           - ``soar/<main class>.loadermap``
         * - number of reference field
           -  ``types>type[nbReferenceFields]``
           - ``soar/<main class>.loadermap``
         * - method code size
           - ``methods>method[codesize]``
           - ``soar/<main class>.loadermap``
         * - method is inlined
           - ``methods>method[inlined=true]``
           - ``soar/<main class>.loadermap``
         * - method is a :ref:`kernel API <kernel.api>`
           - ``methods>method[api=true]``
           - ``soar/<main class>.selectormap``

   .. tab:: The SOAR Information File (Architecture ``7.x``)

      .. list-table::
        :widths: 25 30 45

        * - **Information**
          - **XML tag>subtag[attribute=value]**
          - **File**
        * - :ref:`classpath <chapter.microej.classpath>`
          - ``classpath``
          - ``soar/<main class>.xml``
        * - :ref:`resources <chapter.microej.applicationResources>`
          - ``selected_resources``
          - ``soar/<main class>.xml``
        * - :ref:`external resources <chapter.microej.applicationResources>`
          - ``external_resources``
          - ``soar/<main class>.xml``
        * - :ref:`system properties <system_properties>` 
          - ``java_properties``
          - ``soar/<main class>.xml``
        * - :ref:`constants <section.classpath.elements.constants>`
          - ``constants``
          - ``soar/<main class>.xml``
        * - :ref:`clinit order <soar_clinit>`
          - ``clinit_order``
          - ``soar/<main class>.xml``
        * - selected methods
          - ``selected_methods``
          - ``soar/<main class>.xml``
        * - selected statics fields
          - ``selected_static_fields``
          - ``soar/<main class>.xml``
        * - selected interned strings
          - ``selected_internStrings``
          - ``soar/<main class>.xml``
        * - :ref:`types <section.classpath.elements.types>`
          - ``selected_types``
          - ``soar/<main class>.xml``
        * - :ref:`embed type name <section.classpath.elements.types>`
          - ``required_types``
          - ``soar/<main class>.xml``
        * - :ref:`immutables <section.classpath.elements.immutables>`
          - ``selected_immutables``
          - ``soar/<main class>.xml``
        * - number of types
          - ``selected_types[nb]``
          - ``soar/<main class>.xml``
        * - number of concrete classes
          - ``selected_types[nbConcreteClasses]``
          - ``soar/<main class>.xml``
        * - number of abstract classes
          - ``selected_types[nbAbstractClasses]``
          - ``soar/<main class>.xml``
        * - number of interfaces
          - ``selected_types[nbInterfaces]``
          - ``soar/<main class>.xml``
        * - number of arrays
          - ``selected_types[nbArrays]``
          - ``soar/<main class>.xml``
        * - type is a :ref:`Kenel API <kernel.api>`
          - ``selected_types>type[api=true]``
          - ``soar/<main class>.xml``
        * - type instance size
          - ``selected_types>type[instanceSize]``
          - ``soar/<main class>.xml``
        * - number of reference field
          -  ``selected_types>type[nbReferenceFields]``
          - ``soar/<main class>.xml``
        * - method code size
          - ``selected_methods>method[codesize]``
          - ``soar/<main class>.xml``
        * - method is inlined
          - ``selected_methods>method[inlined=true]``
          - ``soar/<main class>.xml``
        * - method is a :ref:`Kenel API <kernel.api>`
          - ``selected_methods>method[api=true]``
          - ``soar/<main class>.xml``
..
   | Copyright 2008-2023, MicroEJ Corp. Content in this space is free 
   for read and redistribute. Except if otherwise stated, modification 
   is subject to MicroEJ Corp prior approval.
   | MicroEJ is a trademark of MicroEJ Corp. All other trademarks and 
   copyrights are the property of their respective owners.
