<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://docbook.org/xml/4.5/docbookx.dtd">
<!--
	DocBook
	
	Copyright 2014-2017 IS2T. All rights reserved.
	IS2T PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
--><section>
  <title>Output Formats</title>
  <section>
    <title>No Compression</title>
    <para>When no output format is set in the images list file, the image is embedded without any conversion / compression. This allows you to embed the resource as well, in order to keep the source image characteristics (compression, bpp etc.). This option produces the same result as specifiying an image as a resource in the MicroEJ launcher.</para>
    <para>Advantages:</para>
    <itemizedlist>
      <listitem>
        <para>Preserves the image characteristics.</para>
      </listitem>
    </itemizedlist>
    <para>Disadvantages:</para>
    <itemizedlist>
      <listitem>
        <para>Requires an image runtime decoder;</para>
      </listitem>
      <listitem>
        <para>Requires some RAM in which to store the decoded image.</para>
      </listitem>
    </itemizedlist>
    <figure>
      <title>Unchanged Image Example</title>
      <programlisting>image1</programlisting>
    </figure>
  </section>
  <section>
    <title>Display Output Format</title>
    <para>This format encodes the image into the exact display memory representation. If the image to encode contains some transparent pixels, the output file will embed the transparency according to the display's implementation capacity. When all pixels are fully opaque, no extra information will be stored in the output file in order to free up some memory space.</para>
    <para>Advantages:</para>
    <itemizedlist>
      <listitem>
        <para>Drawing an image is very fast;</para>
      </listitem>
      <listitem>
        <para>Supports alpha encoding.</para>
      </listitem>
    </itemizedlist>
    <para>Disadvantages:</para>
    <itemizedlist>
      <listitem>
        <para>No compression: the image size in bytes is proportional to the number of pixels.</para>
      </listitem>
    </itemizedlist>
    <figure>
      <title>Display Output Format Example</title>
      <programlisting>image1:display</programlisting>
    </figure>
  </section>
  <section>
    <title>Generic Output Formats</title>
    <para>Depending on the target hardware, several generic output formats are available. Some formats may be directly managed by the BSP display driver. Refer to the platform specification to retrieve the list of natively supported formats.</para>
    <para>Advantages:</para>
    <itemizedlist>
      <listitem>
        <para>The pixels layout and bits format are standard, so it is easy to manipulate these images on the C-side;</para>
      </listitem>
      <listitem>
        <para>Drawing an image is very fast when the display driver recognizes the format (with or without transparency);</para>
      </listitem>
      <listitem>
        <para>Supports or not the alpha encoding: select the most suitable format for the image to encode.</para>
      </listitem>
    </itemizedlist>
    <para>Disadvantages:</para>
    <itemizedlist>
      <listitem>
        <para>No compression: the image size in bytes is proportional to the number of pixels, the transparency, and the bits-per-pixel.</para>
      </listitem>
    </itemizedlist>
    <para>Select one the following format to use a generic format:</para>
    <itemizedlist>
      <listitem>
        <para>ARGB8888: 32 bits format, 8 bits for transparency, 8 per color. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return c;
}
</programlisting></para>
      </listitem>
      <listitem>
        <para>RGB888: 24 bits format, 8 per color. Image is always fully opaque. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return c &amp; 0xffffff;
}
</programlisting></para>
      </listitem>
      <listitem>
        <para>ARGB4444: 16 bits format, 4 bits for transparency, 4 per color. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return 0
			| ((c &amp; 0xf0000000) >> 16)
			| ((c &amp; 0x00f00000) >> 12)
			| ((c &amp; 0x0000f000) >> 8)
			| ((c &amp; 0x000000f0) >> 4)
			;
}
</programlisting></para>
      </listitem>
      <listitem>
        <para>ARGB1555: 16 bits format, 1 bit for transparency, 5 per color. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return 0
			| (((c &amp; 0xff000000) == 0xff000000) ? 0x8000 : 0)
			| ((c &amp; 0xf80000) >> 9)
			| ((c &amp; 0x00f800) >> 6)
			| ((c &amp; 0x0000f8) >> 3)
			;
}
</programlisting></para>
      </listitem>
      <listitem>
        <para>RGB565: 16 bits format, 5 or 6 per color. Image is always fully opaque. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return 0
			| ((c &amp; 0xf80000) >> 8)
			| ((c &amp; 0x00fc00) >> 5)
			| ((c &amp; 0x0000f8) >> 3)
			;
}
</programlisting></para>
      </listitem>
      <listitem>
        <para>A8: 8 bits format, only transparency is encoded. The color to apply when drawing the image, is the current GraphicsContext color. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return 0xff - (toGrayscale(c) &amp; 0xff);
}
</programlisting></para>
      </listitem>
      <listitem>
        <para>A4: 4 bits format, only transparency is encoded. The color to apply when drawing the image, is the current GraphicsContext color. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return (0xff - (toGrayscale(c) &amp; 0xff)) / 0x11;
}
</programlisting></para>
      </listitem>
      <listitem>
        <para>A2: 2 bits format, only transparency is encoded. The color to apply when drawing the image, is the current GraphicsContext color. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return (0xff - (toGrayscale(c) &amp; 0xff)) / 0x55;
}
</programlisting></para>
      </listitem>
      <listitem>
        <para>A1: 1 bit format, only transparency is encoded. The color to apply when drawing the image, is the current GraphicsContext color. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return (0xff - (toGrayscale(c) &amp; 0xff)) / 0xff;
}
</programlisting></para>
      </listitem>
      <listitem>
        <para>C4: 4 bits format with grayscale conversion. Image is always fully opaque. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return (toGrayscale(c) &amp; 0xff) / 0x11;
}
</programlisting></para>
      </listitem>
      <listitem>
        <para>C2: 2 bits format with grayscale conversion. Image is always fully opaque. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return (toGrayscale(c) &amp; 0xff) / 0x55;
}
</programlisting></para>
      </listitem>
      <listitem>
        <para>C1: 1 bit format with grayscale conversion. Image is always fully opaque. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return (toGrayscale(c) &amp; 0xff) / 0xff;
}
</programlisting></para>
      </listitem>
      <listitem>
        <para>AC44: 4 bits for transparency, 4 bits with grayscale conversion. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return 0
		| ((color >> 24) &amp; 0xf0)
		| ((toGrayscale(color) &amp; 0xff) / 0x11)
		;
}
</programlisting></para>
      </listitem>
      <listitem>
        <para>AC22: 2 bits for transparency, 2 bits with grayscale conversion. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return 0
		| ((color >> 28) &amp; 0xc0)
		| ((toGrayscale(color) &amp; 0xff) / 0x55)
		;
}
</programlisting></para>
      </listitem>
      <listitem>
        <para>AC11: 1 bit for transparency, 1 bit with grayscale conversion. <programlisting>u32 convertARGB8888toRAWFormat(u32 c){
	return 0
		| ((c &amp; 0xff000000) == 0xff000000 ? 0x2 : 0x0)
		| ((toGrayscale(color) &amp; 0xff) / 0xff)
		;
}
</programlisting></para>
      </listitem>
    </itemizedlist>
    <figure>
      <title>Generic Output Format Examples</title>
      <programlisting>image1:ARGB8888
image2:RGB565
image3:A4</programlisting>
    </figure>
  </section>
  <section>
    <title>RLE1 Output Format</title>
    <para>The image engine can display embedded images that are encoded into a compressed format which encodes several consecutive pixels into one or more 16-bits words. This encoding manages a maximum alpha level of 2 (alpha level is always assumed to be 2, even if the image is not transparent). <itemizedlist>
        <listitem>
          <para>Several consecutive pixels have the same color (2 words):</para>
          <itemizedlist>
            <listitem>
              <para>First 16-bit word specifies how many consecutive pixels have the same color;</para>
            </listitem>
            <listitem>
              <para>Second 16-bit word is the pixels' color.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist> <itemizedlist>
        <listitem>
          <para>Several consecutive pixels have their own color (1 + n words):</para>
          <itemizedlist>
            <listitem>
              <para>First 16-bit word specifies how many consecutive pixels have their own color;</para>
            </listitem>
            <listitem>
              <para>Next 16-bit word is the next pixel color.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist> <itemizedlist>
        <listitem>
          <para>Several consecutive pixels are transparent (1 word):</para>
          <itemizedlist>
            <listitem>
              <para>16-bit word specifies how many consecutive pixels are transparent.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist></para>
    <para>Advantages:</para>
    <itemizedlist>
      <listitem>
        <para>Supports 0 &amp; 2 alpha encoding.</para>
      </listitem>
      <listitem>
        <para>Good compression when several consecutive pixels respect one of the three previous rules.</para>
      </listitem>
    </itemizedlist>
    <para>Disadvantages:</para>
    <itemizedlist>
      <listitem>
        <para>Drawing an image is slightly slower than when using Display format.</para>
      </listitem>
    </itemizedlist>
    <figure>
      <title>RLE1 Output Format Example</title>
      <programlisting>image1:RLE1</programlisting>
    </figure>
  </section>
</section>