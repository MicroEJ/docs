.. _application_testsuite:

Test Suite with JUnit
=====================

MicroEJ allows to run unit tests using the standard `JUnit`_ API during
the build process of a MicroEJ library or a MicroEJ Application. The
:ref:`testsuite_engine` runs tests on a target Platform and outputs a
JUnit XML report.

.. _JUnit: https://repository.microej.com/modules/ej/library/test/junit/

JUnit Compliance
----------------

MicroEJ is compliant with a subset of JUnit version 4. 
MicroEJ JUnit processor supports the following annotations: ``@After``,
``@AfterClass``, ``@Before``, ``@BeforeClass``, ``@Ignore``, ``@Test``.

Each test case entry point must be declared using the ``org.junit.Test`` annotation (``@Test`` before a method declaration). 
Please refer to JUnit documentation to get details on usage of other annotations.

Create and Execute Tests
------------------------

JUnit testing can be enabled when using Add-On Library or an Application project. 
JUnit test cases processing is automatically enabled when the `JUnit`_ dependency is declared in the project build file.

Refer to the documentation of your SDK version to create, configure and execute the tests:

- :ref:`SDK 5 <sdk_5_test_project>`
- :ref:`SDK 6 <sdk_6_test_project>`

.. _JUnit: https://repository.microej.com/modules/ej/library/test/junit/


.. _testsuite_report:

Test Suite Reports
------------------

Once a test suite is completed, the following test suite reports are generated:

- JUnit HTML report in the module project location ``target~/test/html/test/junit-noframes.html`` for the SDK 5 
  and ``build/testsuite/report/junit-noframes.html`` for the SDK 6.
  This report contains a summary and the execution trace of every executed test.

  .. figure:: images/testsuiteReportHTMLExample.png
     :alt: Example of MicroEJ Test Suite HTML Report
     
     Example of MicroEJ Test Suite HTML Report

- JUnit XML report in the module project location ``target~/test/xml/TEST-test-report.xml`` for the SDK 5 
  and ``build/testsuite/results/TESTS-TestSuites.xml`` for the SDK 6.

  .. figure:: images/testsuiteReportXMLExample.png
     :alt: Example of MicroEJ Test Suite XML Report
     
     Example of MicroEJ Test Suite XML Report
  
  XML report file can also be open in the JUnit View. Right-click on the file > :guilabel:`Open With` >  :guilabel:`JUnit View`:

  .. figure:: images/testsuiteReportXMLExampleJunitView.png
     :alt: Example of MicroEJ Test Suite XML Report in JUnit View
     
     Example of MicroEJ Test Suite XML Report in JUnit View

If executed on device, the Firmware binary produced for each test
is available in module project location ``target~/test/xml/<TIMESTAMP>/bin/<FULLY-QUALIFIED-CLASSNAME>/application.out``.


Advanced Configurations
-----------------------

Autogenerated Test Classes
~~~~~~~~~~~~~~~~~~~~~~~~~~

The JUnit processor generates test classes into the
``src-adpgenerated/junit/java`` folder. This folder contains:

``_AllTestClasses.java`` file
    A single class with a main entry point that sequentially calls all declared
    test methods of all JUnit test case classes.

``_AllTests_[TestCase].java`` files
    For each JUnit test case class, a class with a main entry point that
    sequentially calls all declared test methods.

``_SingleTest_[TestCase]_[TestMethod].java`` files
    For each test method of each JUnit test case class, a class with a main
    entry point that calls the test method.

JUnit Test Case to MicroEJ Test Case
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :ref:`testsuite_engine` allows to select the classes that will be
executed, by adding the following configuration in the project build file:

.. code-block:: xml
   :caption: module.ivy

   <ea:property name="test.run.includes.pattern" value="[MicroEJ Test Case Include Pattern]"/>

.. code-block:: java
   :caption: build.gradle.kts

   tasks.test {
      filter {
         includeTestsMatching([MicroEJ Test Case Include Pattern])
      }
   }

The following configuration considers all JUnit test methods of the same class as
a single MicroEJ test case (default behavior). If at least one JUnit
test method fails, the whole test case fails in the JUnit report.


.. code-block:: xml
   :caption: module.ivy

   <ea:property name="test.run.includes.pattern" value="**/_AllTests_*.class"/>

.. code-block:: java
   :caption: build.gradle.kts

   tasks.test {
      filter {
         includeTestsMatching("*._AllTests_*")
      }
   }

The following configuration considers each JUnit test method as a dedicated
MicroEJ test case. Each test method is viewed independently in the JUnit
report, but this may slow down the test suite execution because a new
deployment is done for each test method.

.. code-block:: xml
   :caption: module.ivy

   <ea:property name="test.run.includes.pattern" value="**/_SingleTest_*.class"/>

.. code-block:: java
   :caption: build.gradle.kts

   tasks.test {
      filter {
         includeTestsMatching("*._SingleTest_*")
      }
   }

.. _testsuite_options:

Test Suite Options (SDK 5 only)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :ref:`testsuite_engine` can be configured with specific options 
which can be added to the ``module.ivy`` file of the project running the test suite, 
within the ``<ea:build>`` XML element.

- Application Option Injection
  
  It is possible to inject an :ref:`Application Option <application_options>` for all the tests, 
  by adding to the original option the ``microej.testsuite.properties.`` prefix:

  .. code-block:: xml 
  
     <ea:property name="microej.testsuite.properties.[application_option_name]" value="[application_option_value]"/> 
      
- Retry Mechanism
  
  A test execution may not be able to produce the success trace for an external reason,
  for example an unreliable harness script that may lose some trace characters or crop the end of the trace.
  For all these unlikely reasons, it is possible to configure the number of retries before a test is considered to have failed:

  .. code-block:: xml

     <ea:property name="microej.testsuite.retry.count" value="[nb_of_retries]"/> 
      
  By default, when a test has failed, it is not executed again (option value is set to ``0``).

Test Specific Options
~~~~~~~~~~~~~~~~~~~~~

The :ref:`testsuite_engine` allows to define :ref:`application_options` specific to each test case. 
This can be done by defining a file with the same name as the generated test case file, 
but with the ``.properties`` extension instead of the ``.java`` extension. 
The file must be put in the ``src/test/resources`` folder and within the same package than the test case file.


..
   | Copyright 2008-2023, MicroEJ Corp. Content in this space is free 
   for read and redistribute. Except if otherwise stated, modification 
   is subject to MicroEJ Corp prior approval.
   | MicroEJ is a trademark of MicroEJ Corp. All other trademarks and 
   copyrights are the property of their respective owners.
