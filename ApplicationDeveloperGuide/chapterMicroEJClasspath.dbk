<!--
	DocBook

	Copyright 2013-2019 IS2T. All rights reserved.
	IS2T PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
-->
<chapter id="chapter.microej.classpath" >
<title>MicroEJ Classpath</title>
	<para>MicroEJ applications run on a target device and their footprint is optimized to fulfill embedded
		constraints. The final execution context is an embedded device that may not even have a file
		system. Files required by the application at runtime are not directly copied to the target device,
		they are compiled to produce the application binary code which will be executed by MicroEJ Core Engine. 
	</para>
	<para>As a part of the compile-time trimming process, all types not required by the embedded
		application are eliminated from the final binary.
	</para>
	<para>MicroEJ Classpath is a developer defined list of all places containing files to be embedded in the final
		application binary. MicroEJ Classpath is made up of an ordered list of paths. A path is either a
		folder or a zip file, called a JAR file (JAR stands for Java ARchive). </para>
	<para>
		<itemizedlist>
			<listitem>
				<para><xref linkend="application.classpath.mapping"/> explains how the MicroEJ classpath is built from a MicroEJ application project.</para>
			</listitem>
			<listitem><para>
				<xref linkend="section.microej.link.and.load.model"/> explains how the application contents is loaded from MicroEJ Classpath.
			</para></listitem>
			<listitem><para>		
				 <xref linkend="section.classpath.elements"/> specifies the different elements that can be declared in MicroEJ Classpath to describe the application contents.
			</para></listitem>
			<listitem><para>		
				<xref linkend="section.foundation.library.versus.add.on.library"/> explains the different kind of libraries that can be added to MicroEJ Classpath.
			</para></listitem>
			<listitem><para>
			 Finally, <xref linkend="section.ivy.dependency.manager"/> shows how to manage libraries dependencies in MicroEJ.
			</para></listitem>
		</itemizedlist>
	</para>
	<section id="application.classpath.mapping">
		<title>Application Classpath</title>
		<para>The following schema shows the classpath mapping from a MicroEJ application project to the
			MicroEJ Classpath ordered list of folders and JAR files. The
			classpath resolution order (left to right) follows the project appearance order (top to
				bottom).<figure id="sandboxed.project.classpath.mapping">
				<title>MicroEJ Application Classpath Mapping</title>
				<mediaobject>
					<imageobject>
						<imagedata align="center" format="PNG" fileref="png/ClassPath_4.png"
							scalefit="1" width="100%" contentdepth="100%"/>
					</imageobject>
				</mediaobject>
			</figure>
		</para>
	</section>
   
	<section id="section.microej.link.and.load.model">
		<title>Classpath Load Model</title>
		<para>A MicroEJ Application classpath is created via the loading of : 
			<itemizedlist>
				<listitem><para>
					an entry point type,
				</para></listitem>
				<listitem><para>
					all <code>*.[extension].list</code> files declared in a MicroEJ Classpath.
				</para></listitem>
			</itemizedlist>		
		</para>
		<para>	
			The different elements that constitute an application are described in
			<xref linkend="section.classpath.elements"/>. They are searched within MicroEJ
			Classpath from left to right (the first file found is loaded). Types referenced by
			previously loaded MicroEJ Classpath elements are loaded transitively.
		</para>
		<para>
			<figure>
				<title>Classpath Load Principle</title>
			<mediaobject id="dependencies">
	        <imageobject>
	            <imagedata align="center" format="PNG" fileref="png/ClassPath_1.png" scalefit="1" width="100%" contentdepth="100%" />
	        </imageobject>
			</mediaobject>
			</figure>
		</para>
	</section>
	<section id="section.classpath.elements">
		<title>Classpath Elements</title>
		<para>The MicroEJ Classpath contains the following elements: <itemizedlist>
				<listitem>
					<para>An entrypoint described in section <xref
							linkend="section.classpath.elements.entrypoints"/>;</para>
				</listitem>
				<listitem>
					<para>Types in <code>.class</code> files, described in section <xref
							linkend="section.classpath.elements.types"/>;</para>
				</listitem>
				<listitem>
					<para>Raw resources, described in section <xref linkend="section.classpath.elements.resources"
						/>;</para>
				</listitem>
				<listitem>
					<para>Immutables Object data files, described in Section <xref
							linkend="section.classpath.elements.immutables"/>;</para>
				</listitem>
				<listitem>
					<para>Images and Fonts resources;</para>
				</listitem>
				<listitem>
					<para><code>*.[extension].list</code> files, declaring contents to
						load. Supported list file extensions and format is specific to declared
						application contents and is described in the appropriate section.</para>
				</listitem>
			</itemizedlist></para>

	<section id="section.classpath.elements.entrypoints">
		<title>Application Entry Points</title>
		<para>MicroEJ application entry point declaration differs depending on the application kind:</para>
			<para>
				<itemizedlist>
					<listitem>
						<para>In case of a MicroEJ Standalone Application, it is a class that
							contains a <code>public static void main(String[])</code> method,
							declared using the option <code>application.main.class</code>.</para>
					</listitem>
					<listitem>
						<para>In case of a MicroEJ Sandboxed Application, it is a class that
							implements <code>ej.kf.FeatureEntryPoint</code>, declared in the
								<code>Application-EntryPoint</code> entry in
								<code>META-INF/MANIFEST.MF</code> file.</para>
					</listitem>
				</itemizedlist>
			</para>
	</section>

	<section id="section.classpath.elements.types">
			<title>Types</title>
		<para>MicroEJ types (classes, interfaces) are compiled from source code (<code>.java</code>) to
				classfiles (<code>.class</code>). When a type is loaded, all types dependencies
				found in the classfile are loaded (transitively). </para>
		<para>A type can be declared as a <emphasis>Required type</emphasis> in order to enable the
				following usages: <itemizedlist>
					<listitem>
						<para>to be dynamically loaded from its name (with a call to
								<code>Class.forName(String)</code>);</para>
					</listitem>
					<listitem>
						<para>to retrieve its fully qualified name (with a call to
								<code>Class.getName()</code>).</para>
					</listitem>
				</itemizedlist>
		</para>
		<para>
			A type that is not declared as a <emphasis>Required type</emphasis>
			may not have its fully qualified name (FQN) embedded. Its FQN can be retrieved using the
			stack trace reader tool (see <xref linkend="section.stacktrace.reader.tool"/>).
		</para>
		<para>
			Required Types are declared in MicroEJ Classpath using <code>*.types.list</code> files.
			The file format is a standard Java properties file, each line listing the fully qualified
			name of a type. Example:
			<example>
					<title>Required Types <code>*.types.list</code> File Example</title>
					<programlisting># The following types are marked as MicroEJ Required Types
com.mycompany.MyImplementation
java.util.Vector</programlisting>
			</example>
		</para>
	</section>
		<section id="section.classpath.elements.resources">
			<title>Raw Resources</title>
			<para>Raw resources are binary files that need to be embedded by the application so that they
				may be dynamically retrieved with a call to
					<code>Class.getResourceAsStream(java.io.InputStream)</code>. Raw Resources are
				declared in MicroEJ Classpath using <code>*.resources.list</code> files. The file
				format is a standard Java properties file, each line is a relative <code>/</code>
				separated name of a file in MicroEJ Classpath to be embedded as a resource. Example:<example>
					<title>Raw Resources <code>*.resources.list</code> File Example</title>
					<programlisting># The following resource is embedded as a raw resource
com/mycompany/MyResource.txt</programlisting>
				</example></para>
		</section>
		<section id="section.classpath.elements.immutables">
			<title>Immutable Objects</title>
			<para>Immutables objects are regular read-only objects that can be retrieved with a call to
					<code>ej.bon.Immutables.get(String)</code>. Immutables objects are declared in
				files called <emphasis>immutable objects data files</emphasis>, which format is
				described in the <code>[B-ON]</code> specification (<code>http://e-s-r.net</code>).
				Immutables objects data files are declared in MicroEJ Classpath using
					<code>*.immutables.list</code> files. The file format is a standard Java
				properties file, each line is a <code>/</code> separated name of a relative file in
				MicroEJ Classpath to be loaded as an Immutable objects data file. Example:<example>
					<title>Immutable Objects Data Files <code>*.immutables.list</code> File
						Example</title>
					<programlisting># The following file is loaded as an Immutable objects data files
com/mycompany/MyImmutables.data</programlisting>
				</example></para>
		</section>
		<section>
			<title>System Properties</title>
		<para>System Properties are key/value string pairs that can be accessed with a call to
					<code>System.getProperty(String)</code>. System properties are declared in
				MicroEJ Classpath <code>*.properties.list</code> files. The file format is a
				standard Java properties file. Example:<example>
					<title>System Properties <code>*.properties.list</code> File Example</title>
					<programlisting># The following property is embedded as a System property
com.mycompany.key=com.mycompany.value</programlisting>
				</example></para>
	</section>
		<section id="section.classpath.Images">
			<title>Images</title>
			<section>
				<title>Overview</title>
				<para>
					Images are graphical resources that can be accessed with a call to <code>ej.microui.display.Image.createImage()</code>.
					To be displayed, these images have to be converted from their source format to the display raw format.
					The conversion can either be done at :
					<itemizedlist>
						<listitem>
							<para>
								build-time (using the image generator tool),
							</para>
						</listitem>
						<listitem>
							<para>
								run-time (using the relevant decoder library).
							</para>
						</listitem>
					</itemizedlist>
					Images that must be processed by the image generator tool are declared in MicroEJ Classpath <code>*.images.list</code> files.
					The file format is a standard Java properties file, each line representing a <code>/</code> separated resource path relative to the MicroEJ classpath root 
					referring to a standard image file (e.g. <code>.png</code>, <code>.jpg</code>).
					The resource may be followed by an optional parameter (separated by a <code>:</code>) which defines and/or describes the image output file format (raw format).
					When no option is specified, the image is embedded as-is and will be decoded at run-time
					(although listing files without format specifier has no impact on the image generator processing, it is advised to specify them in the <code>*.images.list</code> files anyway, as it makes the run-time processing behavior explicit).
					Example:</para>
				<figure>
					<title>Image Generator <code>*.images.list</code> File Example</title>
					<programlisting>
# The following image is embedded 
# as a PNG resource (decoded at run-time)
com/mycompany/MyImage1.png

# The following image is embedded 
# as a 16 bits format without transparency (decoded at build-time)
com/mycompany/MyImage2.png:RGB565

# The following image is embedded 
# as a 16 bits format with transparency (decoded at build-time)
com/mycompany/MyImage3.png:ARGB1555

</programlisting>
				</figure>
			</section>
			<xi:include href="sectionImageFormats.dbk" xmlns:xi="http://www.w3.org/2001/XInclude"/>
		</section>
		<section id="section.classpath.Fonts">
			<title>Fonts</title>
			<section>
				<title>Overview</title>
				<para>Fonts are graphical resources that can be accessed with a call to <code>ej.microui.display.Font.getFont()</code>.
				To be displayed, these fonts have to be converted at build-time from their source format to the display raw format by the font generator tool.
				Fonts that must be processed by the font generator tool are declared in MicroEJ Classpath <code>*.fonts.list</code> files.
				The file format is a standard Java properties file, each line representing a <code>/</code> separated resource path relative to the MicroEJ classpath root 
				referring to a MicroEJ font file (usually with a <code>.ejf</code> file extension).
				The resource may be followed by optional parameters which define :
				<itemizedlist>
					<listitem>
						<para>
							some ranges of characters to embed in the final raw file;
						</para>
					</listitem>
					<listitem>
						<para>
							the required pixel depth for transparency.
						</para>
					</listitem>
				</itemizedlist>
				By default, all characters available in the input font file are embedded, and the pixel depth is <code>1</code> (i.e 1 bit-per-pixel).
				Example:</para>
				<figure>
					<title>Font Generator <code>*.fonts.list</code> File Example</title>
					<programlisting># The following font is embedded with all characters
# without transparency
com/mycompany/MyFont1.ejf

# The following font is embedded with only the latin 
# unicode range without transparency 
com/mycompany/MyFont2.ejf:latin

# The following font is embedded with all characters
# with 2 levels of transparency
com/mycompany/MyFont2.ejf::2</programlisting>					
				</figure>
				<para>MicroEJ font files conventionally end with the <code>.ejf</code> suffix and are created using the Font Designer (see <xref linkend="section.tool.fontdesigner"/>).</para>
			</section>
			<section>
				<title>Font Range</title>
				<para>The first parameter is for specifying the font ranges to embed. Selecting only a specific
					set of characters to embed reduces the memory footprint. Several ranges can be
					specified, separated by <code>;</code>. There are two ways to specify a
					character range: the custom range and the known range.</para>
				<section>
					<title>Custom Range</title>
					<para>Allows the selection of raw Unicode character ranges.</para>
					<para>Examples:</para>
					<itemizedlist>
						<listitem>
							<para><code>myfont:0x21-0x49</code>: Embed all characters from 0x21 to 0x49 (included);</para>
						</listitem>
						<listitem>
							<para><code>myfont:0x21-0x49,0x55</code>: Embed all characters from 0x21 to 0x49 and character
								0x55;</para>
						</listitem>
						<listitem>
							<para><code>myfont:0x21-0x49;0x55</code>: Same as previous, but done by declaring two ranges.</para>
						</listitem>
					</itemizedlist>
				</section>
				<section>
					<title>Known Range</title>
					<para>
						A known range is a range defined by the "Unicode Character Database" version 9.0.0 available on <code>http://www.unicode.org/</code>.
						Each range is composed of sub ranges that have a unique id.
					</para>
					<itemizedlist>
						<listitem>
							<para><code>myfont:basic_latin</code>: Embed all <emphasis>Basic Latin</emphasis> characters;</para>
						</listitem>
						<listitem>
							<para><code>myfont:basic_latin;arabic</code>:  Embed all <emphasis>Basic Latin</emphasis> characters, and
								all <emphasis>Arabic</emphasis> characters.</para>
						</listitem>
					</itemizedlist>
				</section>
			</section>
			<section>
				<title>Transparency</title>
				<para>The second parameter is for specifying the font transparency level (<code
						>1</code>, <code >2</code>, <code >4</code> or <code
						>8</code>).</para>
				<para>Examples:</para>
				<itemizedlist>
					<listitem>
						<para><code>myfont:latin:4</code>: Embed all latin characters with 4 levels
							of transparency</para>
					</listitem>
					<listitem>
						<para ><code >myfont::2</code>:
							Embed all characters with 2 levels of transparency</para>
					</listitem>
				</itemizedlist>
			</section>
		</section>
	</section>
		
	<section id="section.foundation.library.versus.add.on.library">
		<title>Foundation Libraries vs Add-On Libraries</title>
		<para>A MicroEJ Foundation Library is a MicroEJ Core library that provides core runtime APIs or
			hardware-dependent functionality. A Foundation library is divided into an API and an
			implementation. A Foundation library API is composed of a name and a 2 digits version
			(e.g. <code>EDC-1.3</code>) and follows the semantic versioning
				(<code>http://semver.org</code>) specification. A Foundation library API only
			contains prototypes without code. Foundation library implementations are provided by
			MicroEJ Platforms. From a MicroEJ Classpath, Foundation library APIs dependencies are
			automatically mapped to the associated implementations provided by the Platform or the
			Virtual Device on which the application is being executed.</para>
		<para>A MicroEJ Add-On Library is a MicroEJ library that is implemented on top of MicroEJ
			Foundation Libraries (100% full Java code). A MicroEJ Add-on Library is distributed in a
			single JAR file, with a 3 digits version and provides its associated source code. </para>
		<para>Foundation and Add-on libraries are added to MicroEJ Classpath by the application developer
			as module dependencies (see <xref linkend="section.ivy.dependency.manager"/>).</para>
		<figure>
			<title>MicroEJ Foundation Libraries and Add-On Libraries</title>
			<mediaobject id="libraries">
				<imageobject>
					<imagedata align="center" format="PNG" fileref="png/ClassPath_2.png"
						scalefit="1" width="100%" contentdepth="100%"/>
				</imageobject>
			</mediaobject>
		</figure>
	</section>
	
	<section id="section.ivy.dependency.manager">
	<title>MicroEJ Module Manager</title>
		<para>Modern electronic device design involves many parts and teams to collaborate to
			finally obtain a product to be sold on its market. MicroEJ encourages modular design
			which involves various stake holders: hardware engineers, UX designers, graphic
			designers, drivers/BSP engineers, software engineers, etc. </para>
		<para>Modular design is a design technique that emphasizes separating the functionality of
			an application into independent, interchangeable modules. Each module contains
			everything necessary to execute only one aspect of the desired functionality. In order
			to have team members collaborate internally within their team and with other teams,
			MicroEJ provides a powerful modular design concept, with smart module dependencies,
			controlled by the MicroEJ Module Manager (MMM). MMM frees engineers from the difficult
			task of computing module dependencies. Engineers specify the bare minimum description of
			the module requirements.</para>
	    <para>MMM is based on of the following tools:</para>
		<para>
			<itemizedlist>
				<listitem>
					<para>Apache Ivy (<code>http://ant.apache.org/ivy</code>) for dependencies resolution and
						module publication;</para>
				</listitem>
				<listitem>
					<para>Apache EasyAnt (<code>https://ant.apache.org/easyant/history/trunk/reference.html</code>)
						for module build from source code.</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>In addition, MMM provides a non ambiguous semantic for dependencies resolution. Please
			consult the MMM specification available on
			<code>https://developer.microej.com</code>.</para>
		<para>An Ivy configuration file (<code>module.ivy</code>) must be provided at the root of each
			MicroEJ project to solve classpath dependencies. Multiple Ivy configuration file
			templates are available depending on the kind of MicroEJ application created. </para>
		<para><example>
			<title><code>module.ivy</code> MicroEJ File Template</title>
			
			<programlisting>&lt;ivy-module version="2.0" xmlns:ea="http://www.easyant.org" xmlns:m="http://ant.apache.org/ivy/extra" 
                          xmlns:ej="https://developer.microej.com" ej:version="2.0.0"> 
    &lt;info organisation="[organisation]" module="[name]" status="integration" revision="[version]"&gt;
        &lt;ea:build organisation="com.is2t.easyant.buildtypes" module="[buildtype_name]" revision="[buildtype_version]"&gt;
        	&lt;ea:property name="[buildoption_name]" value="[buildoption_value]"/&gt;
        &lt;/ea:build&gt;
    &lt;/info&gt;
    
    &lt;configurations defaultconfmapping="default-&gt;default;provided-&gt;provided"&gt;
		&lt;conf name="default" visibility="public"/&gt;
		&lt;conf name="provided" visibility="public"/&gt;
		&lt;conf name="documentation" visibility="public"/&gt;
		&lt;conf name="source" visibility="public"/&gt;
		&lt;conf name="dist" visibility="public"/&gt;
		&lt;conf name="test" visibility="private"/&gt;
    &lt;/configurations&gt;
    
    &lt;publications&gt;
    &lt;/publications&gt;
    
    &lt;dependencies&gt;
      &lt;dependency org="[dep_organisation]" name="[dep_name]" rev="[dep_version]"/>
    &lt;/dependencies&gt;
&lt;/ivy-module&gt;		</programlisting>
		</example>
		</para>
	</section>
	
	<section>
		<title>MicroEJ Central Repository</title>
		<para>The MicroEJ Central Repository is the binary repository maintained by MicroEJ. It contains
			Foundation library APIs and numerous Add-On Libraries. Foundation libraries APIs are
			distributed under the organization <code>ej.api</code>. All other artifacts are Add-On
			libraries.</para>
		<para>For more information, please visit <code>https://repository.microej.com</code>.</para>
	</section>
	<section>
		<title>Offline Repository</title>
		<para>By default, MicroEJ is configured to connect online MicroEJ Central Repository. The MicroEJ
			Central Repository can be downloaded locally for offline use. Please follow the steps
			described at <code>https://repository.microej.com</code>.</para>
	</section>
	
</chapter>
