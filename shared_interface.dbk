<!--
	DocBook

	Copyright 2013-2019 IS2T. All rights reserved.
	IS2T PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
-->
<chapter id="chapter.shared.interfaces" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Shared Interfaces</title>
    
	<section id="section.shared.interfaces.contract" >
	<title>Principle</title>
	    <para>The Shared Interface mechanism provided by MicroEJ Core Engine is an object communication bus
			based on plain Java interfaces where method calls are allowed to cross MicroEJ Sandboxed
			Applications boundaries. The Shared Interface mechanism is the cornerstone for designing
			reliable Service Oriented Architectures on top of MicroEJ. Communication is based on
			the sharing of interfaces defining APIs (Contract Oriented Programming).</para>
		<para>The basic schema:<itemizedlist>
				<listitem>
					<para>A provider application publishes an implementation for a shared interface
						into a system registry.</para>
				</listitem>
				<listitem>
					<para>A user application retrieves the implementation from the system registry and directly
						calls the methods defined by the shared interface.</para>
				</listitem>
			</itemizedlist>
		</para>
            <figure>
				<title>Shared Interface Call Mechanism</title>
				<mediaobject id="shared_interface">
				<imageobject>
					<imagedata align="center" format="PNG" fileref="png/SI_1.png" scalefit="1"
						width="70%" contentdepth="100%"/>
				</imageobject>
			</mediaobject>
			</figure>
	</section>
    
	<section id="section.shared.interfaces.element" >
		<title>Shared Interface Creation</title>
			<para>Creation of a shared interface follows three steps: <itemizedlist>
				<listitem>
					<para>Interface definition,</para>
				</listitem>
				<listitem>
					<para>Proxy implementation,</para>
				</listitem>
				<listitem>
					<para>Interface registration.</para>
				</listitem>
			</itemizedlist></para>
		<section>
	
		<title>Interface Definition</title>
		<para>The definition of a shared interface starts by defining a standard Java interface.
			<programlisting language="java">package mypackage;
public interface MyInterface{ 
	void foo();
}</programlisting>To
			declare an interface as a shared interface, it must be registered in a shared interfaces
			identification file. A shared interface identification file is an XML file with the
				<code>.si</code> suffix with the following
			format:<programlisting>&lt;sharedInterfaces>
	&lt;sharedInterface name="mypackage.MyInterface"/>
&lt;/sharedInterfaces></programlisting></para>
		<para>Shared interface identification files must be placed at the root of a path of the
				application classpath. For a MicroEJ Sandboxed Application project, it is typically
				placed in <code>src/main/resources</code> folder. </para>
		<para> Some restrictions apply to shared interface compared to standard java interfaces: <itemizedlist>
				<listitem>
					<para>Types for parameters and return values must be transferable types;</para>
				</listitem>
				<listitem>
					<para>Thrown exceptions must be classes owned by the MicroEJ Firmware.</para>
				</listitem>
		</itemizedlist></para>
	
		</section>
		<section id="section.transferable.types" >
			<title>Transferable Types</title>
			<para>In the process of a cross-application method call, parameters and return value of methods
				declared in a shared interface must be transferred back and forth between
				application boundaries.
                </para>
                <figure>
					<title>Shared Interface Parameters Transfer</title><mediaobject id="SI_parameters">
					<imageobject>
						<imagedata align="center" format="PNG" fileref="png/SI_3.png" scalefit="1"
							width="70%" contentdepth="100%"/>
					</imageobject>
				</mediaobject>
				</figure>
                <para>
					<xref linkend="table.si.transfer.rules"/> describes the rules applied
				depending on the element to be transferred.<table id="table.si.transfer.rules" frame="all" colsep="1">
					<title>Shared Interface Types Transfer Rules</title>
					<tgroup cols="4">
						<colspec colwidth="2*"/>
						<colspec colwidth="1.5*"/>
						<colspec colwidth="1*"/>
						<colspec colwidth="3*"/>
						<thead>
							<row>
								<entry>Type</entry>
								<entry>Owner</entry>
								<entry>Instance Owner</entry>
								<entry>Rule</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>Base type</entry>
								<entry>N/A</entry>
								<entry>N/A</entry>
								<entry>Passing by value. (<code>boolean</code>, <code>byte</code>,
										<code>short</code>, <code>char</code>, <code>int</code>,
										<code>long</code>, <code>double</code>,
									<code>float</code>)</entry>
							</row>
							<row>
								<entry>Any Class, Array or Interface</entry>
								<entry>MicroEJ Firmware</entry>
								<entry>MicroEJ Firmware</entry>
								<entry>Passing by reference</entry>
							</row>
							<row>
								<entry>Any Class, Array or Interface</entry>
								<entry>MicroEJ Firmware</entry>
								<entry>Application</entry>
								<entry>MicroEJ Firmware specific or forbidden</entry>
							</row>
							<row>
								<entry>Array of base types</entry>
								<entry>Any</entry>
								<entry>Application</entry>
								<entry>Clone by copy</entry>
							</row>
							<row>
								<entry>Arrays of references</entry>
								<entry>Any</entry>
								<entry>Application</entry>
								<entry>Clone and transfer rules applied again on each
									element</entry>
							</row>
							<row>
								<entry>Shared Interface</entry>
								<entry>Application</entry>
								<entry>Application</entry>
								<entry>Passing by indirect reference (Proxy creation)</entry>
							</row>
							<row>
								<entry>Any Class, Array or Interface</entry>
								<entry>Application</entry>
								<entry>Application</entry>
								<entry>Forbidden</entry>
							</row>
						</tbody>
					</tgroup>
				</table></para>
			<para>Objects created by an application which class is owned by MicroEJ Firmware can be transferred to
				another application if this has been authorized by the firwmare. The list of eligible
				types that can be transferred is firwmare specific, so you have to consult the
				firmware specification. <xref linkend="table.si.transfer.firmware"/> lists firmware
				types allowed to be transferred through a shared interface call. When an argument
				transfer is forbidden, the call is abruptly stopped and a
					<code>java.lang.IllegalAccessError</code> is thrown by MicroEJ Core
					Engine.<table id="table.si.transfer.firmware" frame="all" colsep="1">
					<title>MicroEJ Evaluation Firmware Example of Transfer
						Types</title>
					<tgroup cols="2">
						<colspec/>
						<colspec/>
						<thead>
							<row>
								<entry>Type</entry>
								<entry>Rule</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry><code>java.lang.String</code></entry>
								<entry>Clone by copy</entry>
							</row>
							<row>
								<entry><code>java.io.InputStream</code></entry>
								<entry>Proxy reference creation</entry>
							</row>
							<row>
								<entry><code>java.util.Map&lt;String,String></code></entry>
								<entry>Clone by deep copy</entry>
							</row>
						</tbody>
					</tgroup>
				</table></para>
		</section>
		<section id="section.proxy.implementation" >
			<title>Proxy Class Implementation</title>
			<para>The Shared Interface mechanism is based on automatic proxy objects created by the
			underlying MicroEJ Core Engine, so that each application can still be dynamically
			stopped and uninstalled. This offers a reliable way for users and providers to handle
			the relationship in case of a broken link. </para>
			
			<para>Once a Java interface has been declared as Shared Interface, a dedicated implementation is
				required (called the Proxy class implementation). Its main goal is to perform the
				remote invocation and provide a reliable implementation regarding the interface
				contract even if the remote application fails to fulfill its contract (unexpected
				exceptions, application killed...). The MicroEJ Core Engine will allocate instances
				of this class when an implementation owned by another application is being
				transferred to this application.
                </para>
                <figure>
					<title>Shared Interfaces Proxy Overview</title>
					<mediaobject id="SI_proxy">
						<imageobject>
							<imagedata align="center" format="PNG" fileref="png/SI_4.png"
								scalefit="1" width="70%" contentdepth="100%"/>
						</imageobject>
					</mediaobject>
				</figure>
                <para>A proxy class is implemented and executed on the client side, each method
				of the implemented interface must be defined according to the following pattern:
				<programlisting language="java">package mypackage;

public class MyInterfaceProxy extends Proxy&lt;MyInterface> implements MyInterface {

	@Override
	public void foo(){
		try {
			invoke(); // perform remote invocation
		} catch (Throwable e) {
			e.printStackTrace();
		}
	}
}</programlisting></para>
			<para> </para>
			<para>Each implemented method of the proxy class is responsible for performing the remote call
				and catching all errors from the server side and to provide an appropriate answer to
				the client application call according to the interface method specification
				(contract). Remote invocation methods are defined in the super class
					<code>ej.kf.Proxy</code> and are named <code>invokeXXX()</code> where
					<code>XXX</code> is the kind of return type. As this class is part of the
				application, the application developer has the full control on the Proxy
				implementation and is free to insert additional code such as logging calls and
				errors for example.<table frame="all">
					<title>Proxy Remote Invocation Built-in Methods</title>
					<tgroup cols="2">
						<colspec colnum="1" colname="c1" colwidth=".75*"/>
						<colspec colnum="2" colname="c2" colwidth="1*"/>
						<thead>
							<row>
								<entry>Invocation Method</entry>
								<entry>Usage</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>void invoke()</entry>
								<entry>Remote invocation for a proxy method that returns
									void</entry>
							</row>
							<row>
								<entry>Object invokeRef()</entry>
								<entry>Remote invocation for a proxy method that returns a
									reference</entry>
							</row>
							<row>
								<entry>boolean invokeBoolean(), byte invokeByte(), char
									invokeChar(), short invokeShort(), int invokeInt(), long
									invokeLong(), double invokeDouble(), float invokeFloat()</entry>
								<entry>Remote invocation for a proxy method that returns a base
									type</entry>
							</row>
						</tbody>
					</tgroup>
				</table></para>
		</section>
	</section>
</chapter>
